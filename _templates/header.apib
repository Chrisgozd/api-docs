FORMAT: 1A

HOST: https://localhost/api/

Metasys API
===========

The Metasys API is the exposed interface for accessing system data. This document defines the contracts included in that interface.

<!--
**See HLD for more detailed information about the API**
-->

## API Version

Version: 2
Prefix: /api/v2
Documentation: {{revision}}

### API Version Notes

<!--
This document describes version 2 of the API (not to be confused with document version in [Document Information](#document-information) section above). -->

At Metasys 10.1, the only supported version is v2. (Note: v1 is not supported by Metasys 10.1)
While this is currently the only version available, as new versions are added the API consumer will need to specify which version of the API they intend to use.

In the future, multiple versions may be supported on one release of Metasys. It is recommend that you explicitly specify which version you intent to use. The primary means of doing this is to add the version before the first entity in the URL using the format "v[#]":

* `http://localhost/api/v2/spaces` for version 2
* `http://localhost/api/v3/spaces` for version 3

If using the URL is undesirable, an alternate approach is to use the `Accept` header in the HTTP request, and modify the version portion based on which version is intended, again using the "v[#]" format:

* `Accept: application/vnd.metasysapi.v2+json` for version 2
* `Accept: application/vnd.metasysapi.v3+json` for version 3

#### Version Specification Rules

Because the version specification is optional and can be provided in multiple ways, the following rules are used when determining or providing version information:

* If no version is specified, the lowest supported version (v2) will be used.
* If the version is specified in both the URL and the `Accept` header, the version specified in the URL will be used and the a version specified in the header will be ignored.
* If the version specified is invalid (i.e. does not represent a known version of the API), a 404 (not found) error status will be returned.

#### Version Response Behavior

The `Content-Type` header of the response will always contain (in part) the version of the API that was used to serve the request. This allows the consumer to identify which version of the API was utilized.

## Pagination

On endpoints where `page` and `pageSize` is allowed, the default `page` number will be 1 and is 1-based for all endpoints while the default `pageSize` will vary between endpoints.  The `page` parameter indicates the `page` number of items to return from the endpoint.  The `pageSize` parameter indicates the maximum number of items in the response from the endpoint.

Payloads returned by pagination-enabled endpoints will have a similar structure. A `total` property will indicate the total number of items included in all pages. A `next` and `previous` property will supply a link to the next and previous page of data, respectively (These properties can be empty if irrelevant, e.g. it is the first/last page, or there is only one page of data). The `items` property contains the data included in the page.

## Sorting Rules

On endpoints where a `sort` query parameter is allowed, the supplied value should be in the format of a single attribute name, optionally prefixed with `-` to indicate descending sort order (ascending order is used if no prefix is supplied).

## Relationship Links

Payloads may contain links to related data, each represented as a property sharing the name of the respective relationship. The links point to either single or multiple related entities. A link to a single entity points to the canonical endpoint for that entity. A link to multiple entities points to an endpoint dedicated to representing that particular relationship.

For example, if object `/objects/a` has children `/objects/b` and `/objects/c`, the payload returned by `/objects/a` will have a property `objects` with a value of `/objects/a/objects`, because multiple children can be returned. However, the payload returned by `/objects/b/` will contain a property 'parent' with a value of `/objects/a` (not `/objects/b/parent`), because the relationship represents a single entity.

Additionally, each payload will contain a `self` property, which contains a link representing the endpoint used to obtain the data contained in the current payload.

## DateTimes

Unless otherwise specified, all date times in the document are ISO-8601 encoded.

## Validation

There are some general rules that apply across all endpoints. If certain provided inputs are invalid or preconditions are not met, the API wll respond with an appropriate error to indicate what went wrong.

|Condition                      |Error                       |Details                                                                                                    |
|-------------------------------|----------------------------|-----------------------------------------------------------------------------------------------------------|
|Missing required parameter     |400 (Bad Request)           |A parameter marked required in this document is not included in the request                                |
|Parameter incorrect type       |400 (Bad Request)           |A parameter is included with a value of the wrong type (e.g. number is expected and string is provided)    |
|Parameter out of range         |400 (Bad Request)           |A numeric parameter is included but the value is outside the allowed range                                 |
|Parameter not in set           |400 (Bad Request)           |A string parameter has a set of predefined valid values, and the value provided is not included in that set|
|Parameter not in correct format|400 (Bad Request)           |A string parameter with expected format is provided in the wrong format                                    |
|User not authenticated         |401 (Unauthorized)          |The auth token supplied with the request is missing, invalid, or expired                                   |
|Record not authorized          |403 (Forbidden)             |The user is not authorized to view data matching the provided identifier                                   |
|Identifier not found           |404 (Not Found)             |An identifier is provided that does not match any known data                                               |
|The Resource already exists    |409 (Conflict)              |The Resource already exists                                                                                |
|Internal Server Error          |500 (Internal Server Error) |An unexpected error occurs                                                                                 |
|The device is not supported    |501 (Not Implemented)       |The server does not support the functionality required to fulfill the request                              |
|The device is offline          |503 (Service Unavailable)   |The device is currently offline and unable to serve the request                                            |

## Redirects

HTTP Redirects are used throughout the Metasys API.  This means that the client calling a Metasys API endpoint will have to handle the redirect in order for the service call to be completed.  Note that some clients and frameworks may handle the redirect automatically.

HTTP Redirects are planned to be deprecated in future Metasys release and replaced with a reverse proxy to handle inbound and outbound HTTP calls.  This means the client will no longer have to handle the redirect but instead will be able to make a direct HTTP calls without anything extra to handle.
